""" microturbine with heat exchanger """

import cantera as ct
import matplotlib.pyplot as plt


T0 = 293           # in Kelvin
P0 = 1E5           # in Pa
AIR_MASS_FLOW = 20          # in g/s
HYDROGEN_MASS_FLOW = 0.097  #in g/s
PHI = (1/0.42)/((AIR_MASS_FLOW/29)/(HYDROGEN_MASS_FLOW/2))
print("PHI : " + str(round(PHI,2)))
GAMMA = 1.4
COMPRESSION_EFFICIENCY = 0.66
TURBINE_EFFICIENCY = 0.78
gas = ct.Solution('gri30.yaml')
gas.TPX = T0, P0, 'N2:0.79, O2:0.21'
H0 = gas.h
S0 = gas.s



##################
#   Compressor
##################

COMPRESSION_RATIO = 3
P3 = P0*COMPRESSION_RATIO
T3_IS = T0*(P0/P3)**((1-GAMMA)/GAMMA)
gas.TP = T3_IS,P3
H3_IS = gas.h

print("Compressor outlet pressure = " + str(P3*1E-5) + " bar")

ISENTROPIC_COMPRESSION_POWER = (H3_IS - H0)*AIR_MASS_FLOW*1E-3
COMPRESSION_POWER = ISENTROPIC_COMPRESSION_POWER/COMPRESSION_EFFICIENCY
print("Isentropic compression power = " + str(int(ISENTROPIC_COMPRESSION_POWER)) + " W")
print("Compression power = " + str(int(COMPRESSION_POWER)) + " W")

T3 = T0+COMPRESSION_POWER/(gas.cp*AIR_MASS_FLOW*1E-3)
gas.TP = T3,P3
H3 = gas.h
S3 = gas.s
print("Compressor outlet temperature (isentropic) = " + str(int(T3_IS)) + " K")
print("Compressor outlet temperature = " + str(int(T3)) + " K")



""" Combustion chamber with heat exchanger"""

# combustion initialization
gas.set_equivalence_ratio(phi = PHI, fuel = 'H2', oxidizer = 'O2: 0.21, N2: 0.79')
gas.equilibrate('HP')

T4 = gas.T
P4 = gas.P

# relaxation initialization
P5 = P0
T5_IS = T4*(P4/P5)**((1-GAMMA)/GAMMA)
gas.TP = T5_IS,P5
H5_IS = gas.h

# heat exchanger
epsilon = 0.037
EPSILON_SPACING = 0.02
T4_stab_list = [T4]
T35_stab_list = []
T4_LIM = 1200

while T4_stab_list[-1] < T4_LIM :
    T35_list = []
    T4_list = []
    T5_IS_list = [T5_IS]
    T5_list = [T5_IS]

    for k in range (10):
        T35_list.append(T3+epsilon*(T5_list[k]-T3))

        gas = ct.Solution('gri30.yaml')
        gas.TP = T35_list[k], P3
        gas.set_equivalence_ratio(phi = PHI, fuel = 'H2', oxidizer = 'O2: 0.21, N2: 0.79')
        gas.equilibrate('HP')
        T4_list.append(gas.T)
        gas.TP = T4_list[-1],P4

        T5_IS_list.append(T4_list[-1]*(P4/P5)**((1-GAMMA)/GAMMA))
        gas.TP = T5_IS_list[-1],P5
        H5_IS = gas.h

        ISENTROPIC_TURBINE_POWER = (H3-H5_IS)*AIR_MASS_FLOW*1E-3
        TURBINE_POWER = ISENTROPIC_TURBINE_POWER*TURBINE_EFFICIENCY
        T5 = T4_list[-1] - TURBINE_POWER/(gas.cp*AIR_MASS_FLOW*1E-3)
        T5_list.append(T5)

    epsilon += EPSILON_SPACING
    T4_stab_list.append(T4_list[-1])
    T35_stab_list.append(T35_list[-1])

print("Epsilon heat exchanger = " + str(epsilon-EPSILON_SPACING))

T35 = T35_stab_list[-2]
gas2 = ct.Solution('gri30.yaml')
gas2.TPX = T35, P3, 'N2:0.79, O2:0.21'
H35 = gas2.h
S35 = gas2.s

T4 = T4_stab_list[-2]
gas.TP = T4, P4
H4 = gas.h
S4 = gas.s

print("Combustion chamber inlet temperature : " + str(int(T35)) + " K")
print("T4 = " + str(int(T4)) + " K")



""" Turbine """

P5 = P0
T5_IS = T4*(P4/P5)**((1-GAMMA)/GAMMA)
gas.TP = T5_IS,P5
H5_IS = gas.h

ISENTROPIC_TURBINE_POWER = (H4-H5_IS)*AIR_MASS_FLOW*1E-3
TURBINE_POWER = ISENTROPIC_TURBINE_POWER*TURBINE_EFFICIENCY
T5 = T4 - TURBINE_POWER/(gas.cp*AIR_MASS_FLOW*1E-3)
print("Turbine outlet temperature = " + str(int(T5)) + " K")
gas.TP = T5,P5
H5 = gas.h
S5 = gas.s
print("Isentropic turbine power = " + str(int(ISENTROPIC_TURBINE_POWER)) + " W")
print("Turbine power = " + str(int(TURBINE_POWER)) + " W")

print("Available power = " + str(int(TURBINE_POWER-COMPRESSION_POWER)) + " W")


""" Efficiency """

THERMAL_POWER = 120E6*HYDROGEN_MASS_FLOW*1E-3
EFFICENCY = (TURBINE_POWER-COMPRESSION_POWER)/THERMAL_POWER
print("Rendement = " + str(EFFICENCY*100) + " %")


""" Profiles (figures) """
gas()
plt.plot([S0,S3,S35,S4,S5],[H0,H3,H35,H4,H5])
p1 = plt.plot([S0,S3],[H0,H3], label='Compression')
p2 = plt.plot([S3,S35],[H3,H35], label = 'Echangeur')
p3 = plt.plot([S35,S4],[H35,H4], label = 'Combustion')
p4 = plt.plot([S4,S5],[H4,H5], label = 'Turbine')
plt.legend()
plt.xlabel("Entropie ($J.K^{-1}.kg^{-1}$)")
plt.ylabel("Enthalpie ($J.kg^{-1}$)")
plt.show()

